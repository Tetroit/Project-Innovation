//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project Innovation.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ProjectInnovation: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ProjectInnovation()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Project Innovation"",
    ""maps"": [
        {
            ""name"": ""Sensors"",
            ""id"": ""93f470e4-0aae-4a6d-bf20-62fa9c243b28"",
            ""actions"": [
                {
                    ""name"": ""Light"",
                    ""type"": ""Value"",
                    ""id"": ""33afe06e-95d5-439d-b7bd-415d921d1cb0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gyroscope"",
                    ""type"": ""Value"",
                    ""id"": ""c1efaabf-0bf4-49bf-8d68-92c58128cbea"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerometer"",
                    ""type"": ""Value"",
                    ""id"": ""c4574e3f-4f7c-4cbf-a695-79dcc7263afd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""750e7742-a8c6-49b3-b5b4-545b4bf78303"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c51117ad-3dd3-4bf8-8577-86f8997e7aea"",
                    ""path"": ""<LightSensor>/lightLevel"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""161dab36-bd9e-4ed1-8bba-1eafd5c60102"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gyroscope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80853d5e-9346-4716-8936-d591b45a7d56"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerometer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4e7cbc0-5448-4a0a-98e9-e9b553d238f5"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""531dc6af-dca9-4899-96e5-0a3d3269f58d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Turn"",
            ""id"": ""b7027e24-6646-484d-9b89-db35e9e6781d"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""98e252b0-25be-4a90-b905-ec495c14fee8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""438b97ce-80a7-46a5-b674-501633de2911"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fb40c2f-6207-442a-aa7e-6bc2c10ee149"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955cc30d-2b2d-426f-a182-96acf66fcc61"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Sensors
        m_Sensors = asset.FindActionMap("Sensors", throwIfNotFound: true);
        m_Sensors_Light = m_Sensors.FindAction("Light", throwIfNotFound: true);
        m_Sensors_Gyroscope = m_Sensors.FindAction("Gyroscope", throwIfNotFound: true);
        m_Sensors_Accelerometer = m_Sensors.FindAction("Accelerometer", throwIfNotFound: true);
        m_Sensors_Click = m_Sensors.FindAction("Click", throwIfNotFound: true);
        // Turn
        m_Turn = asset.FindActionMap("Turn", throwIfNotFound: true);
        m_Turn_Left = m_Turn.FindAction("Left", throwIfNotFound: true);
        m_Turn_Right = m_Turn.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Sensors
    private readonly InputActionMap m_Sensors;
    private List<ISensorsActions> m_SensorsActionsCallbackInterfaces = new List<ISensorsActions>();
    private readonly InputAction m_Sensors_Light;
    private readonly InputAction m_Sensors_Gyroscope;
    private readonly InputAction m_Sensors_Accelerometer;
    private readonly InputAction m_Sensors_Click;
    public struct SensorsActions
    {
        private @ProjectInnovation m_Wrapper;
        public SensorsActions(@ProjectInnovation wrapper) { m_Wrapper = wrapper; }
        public InputAction @Light => m_Wrapper.m_Sensors_Light;
        public InputAction @Gyroscope => m_Wrapper.m_Sensors_Gyroscope;
        public InputAction @Accelerometer => m_Wrapper.m_Sensors_Accelerometer;
        public InputAction @Click => m_Wrapper.m_Sensors_Click;
        public InputActionMap Get() { return m_Wrapper.m_Sensors; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SensorsActions set) { return set.Get(); }
        public void AddCallbacks(ISensorsActions instance)
        {
            if (instance == null || m_Wrapper.m_SensorsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SensorsActionsCallbackInterfaces.Add(instance);
            @Light.started += instance.OnLight;
            @Light.performed += instance.OnLight;
            @Light.canceled += instance.OnLight;
            @Gyroscope.started += instance.OnGyroscope;
            @Gyroscope.performed += instance.OnGyroscope;
            @Gyroscope.canceled += instance.OnGyroscope;
            @Accelerometer.started += instance.OnAccelerometer;
            @Accelerometer.performed += instance.OnAccelerometer;
            @Accelerometer.canceled += instance.OnAccelerometer;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ISensorsActions instance)
        {
            @Light.started -= instance.OnLight;
            @Light.performed -= instance.OnLight;
            @Light.canceled -= instance.OnLight;
            @Gyroscope.started -= instance.OnGyroscope;
            @Gyroscope.performed -= instance.OnGyroscope;
            @Gyroscope.canceled -= instance.OnGyroscope;
            @Accelerometer.started -= instance.OnAccelerometer;
            @Accelerometer.performed -= instance.OnAccelerometer;
            @Accelerometer.canceled -= instance.OnAccelerometer;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ISensorsActions instance)
        {
            if (m_Wrapper.m_SensorsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISensorsActions instance)
        {
            foreach (var item in m_Wrapper.m_SensorsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SensorsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SensorsActions @Sensors => new SensorsActions(this);

    // Turn
    private readonly InputActionMap m_Turn;
    private List<ITurnActions> m_TurnActionsCallbackInterfaces = new List<ITurnActions>();
    private readonly InputAction m_Turn_Left;
    private readonly InputAction m_Turn_Right;
    public struct TurnActions
    {
        private @ProjectInnovation m_Wrapper;
        public TurnActions(@ProjectInnovation wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Turn_Left;
        public InputAction @Right => m_Wrapper.m_Turn_Right;
        public InputActionMap Get() { return m_Wrapper.m_Turn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurnActions set) { return set.Get(); }
        public void AddCallbacks(ITurnActions instance)
        {
            if (instance == null || m_Wrapper.m_TurnActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurnActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(ITurnActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(ITurnActions instance)
        {
            if (m_Wrapper.m_TurnActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurnActions instance)
        {
            foreach (var item in m_Wrapper.m_TurnActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurnActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurnActions @Turn => new TurnActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ISensorsActions
    {
        void OnLight(InputAction.CallbackContext context);
        void OnGyroscope(InputAction.CallbackContext context);
        void OnAccelerometer(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface ITurnActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
